name: CICD_Netflix_Clone_Recommend

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest version and bump
        id: version
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="v1.0.0"
          else
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "${{ github.event.inputs.version_bump }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create and push tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a ${{ steps.version.outputs.new_version }} -m "Release ${{ steps.version.outputs.new_version }}"
          git push origin ${{ steps.version.outputs.new_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/netflix-clone-recommend:${{ steps.version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/netflix-clone-recommend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/netflix-clone-recommend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/netflix-clone-recommend:buildcache,mode=max

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: Release ${{ steps.version.outputs.new_version }}
          body: |
            ## Release ${{ steps.version.outputs.new_version }}
            
            ### Docker Images
            - `${{ secrets.DOCKER_USERNAME }}/netflix-clone-recommend:${{ steps.version.outputs.new_version }}`
            - `${{ secrets.DOCKER_USERNAME }}/netflix-clone-recommend:latest`
            
            ### Changes
            Auto-generated release by GitHub Actions
          draft: false
          prerelease: false
